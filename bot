import pandas as pd
import requests
from aiogram import Bot, Dispatcher, executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os

API_TOKEN = '7777670053:AAG8uRC8-oLlGh-mt6LgaCh_DJKHrBwp3T0'
EXCEL_URL = 'https://cloud.melonfashion.ru/s/NGgy224L5QNDCfZ'
FILE_PATH = '/tmp/duty_schedule.xlsx'  # временное хранение файла

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# Функция для скачивания Excel-файла
def download_excel_file():
    response = requests.get(EXCEL_URL)
    with open(FILE_PATH, 'wb') as f:
        f.write(response.content)

# Функция для чтения файла и извлечения данных
def get_duty_schedule():
    df = pd.read_excel(FILE_PATH)
    # Пример, как можно извлекать данные (зависит от структуры Excel)
    duty_today = df.loc[df['day'] == 'сегодня']  # фильтрация по текущему дню
    # Форматирование сообщения
    message = f"Доброго времени суток!\nСпешу сообщить, что сегодня в смене работают следующие сотрудники:\n\n"
    for index, row in duty_today.iterrows():
        message += f"{row['position']} {row['name']} ({row['phone']}) = @{row['telegram']}\n"
    message += "\nЖелаю хорошего рабочего дня!"
    return message

# Функция для отправки сообщения в определённое время
async def send_duty_message():
    download_excel_file()  # Скачиваем актуальный файл
    message = get_duty_schedule()  # Извлекаем информацию
    await bot.send_message(chat_id='id_чата', text=message)

# Настройка отправки сообщения в 7:00 по МСК
scheduler.add_job(send_duty_message, 'cron', hour=7, minute=0, timezone='Europe/Moscow')

# Команда выбора дня недели
@dp.message_handler(commands=['choose_day'])
async def choose_day(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    days = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']
    for day in days:
        keyboard.add(types.InlineKeyboardButton(day, callback_data=f"day_{day.lower()}"))
    await message.answer("Выберите день недели:", reply_markup=keyboard)

# Обработка выбора дня
@dp.callback_query_handler(lambda c: c.data.startswith('day_'))
async def process_day_choice(callback_query: types.CallbackQuery):
    day = callback_query.data.split('_')[1]
    await callback_query.message.answer(f"Вы выбрали: {day}")

# Старт бота
if __name__ == '__main__':
    scheduler.start()  # Запускаем планировщик
    executor.start_polling(dp, skip_updates=True)
